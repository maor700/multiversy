/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DisplayModes } from "./components/mtv-window-header/types";
export namespace Components {
    interface MtvCrossIframe {
        /**
          * Disable loader on iframe loading;
         */
        "appRoute": boolean;
        /**
          * Disable loader on iframe loading;
         */
        "disableLoader": boolean;
        /**
          * Fit size of the Element to the content of the iframe;
         */
        "fitToContent": boolean | string;
        /**
          * Head code to inject to the iframe, styles, links and scripts;
         */
        "headCode": string;
        /**
          * The app name id.
         */
        "name": string;
        /**
          * The route of the gust app.
         */
        "route": string;
        /**
          * The url of the gust app to be hosted.
         */
        "src": string;
    }
    interface MtvMain {
    }
    interface MtvModalPortal {
        /**
          * Hide overlay element
         */
        "hideOverlay": boolean;
        /**
          * Id for the portal element
         */
        "nameId": string;
        /**
          * Overlay background color
         */
        "overlayColor": string;
        /**
          * Element To put the portal into. it's Can be element from current document or even element from another document like iframe parent body.
         */
        "targetContainer": HTMLElement;
    }
    interface MtvPortal {
        /**
          * HTML head inline code (scripts, links, styles ect...)  to inject to the targetContainer in addition to the portaled element itself;
         */
        "headInlineHtml": string;
        /**
          * Uniqe name for internal classes names and ect
         */
        "nameId": string;
        /**
          * The target container that will contain the portaled element.
         */
        "targetContainer": HTMLElement;
    }
    interface MtvTooltipPortal {
        /**
          * Background color of the tooltip;
         */
        "background"?: string;
        /**
          * Uniqe name for internal classes names and ect
         */
        "nameId": string;
        /**
          * The Position of the portaled element.
         */
        "position"?: { x: number; y: number };
        /**
          * The target container that will contain the portaled element.
         */
        "targetContainer"?: HTMLElement;
    }
    interface MtvWindow {
        /**
          * Uniqe name for internal classes names and ect
         */
        "name": string;
    }
    interface MtvWindowHeader {
        /**
          * The window name
         */
        "windowName": string;
    }
}
declare global {
    interface HTMLMtvCrossIframeElement extends Components.MtvCrossIframe, HTMLStencilElement {
    }
    var HTMLMtvCrossIframeElement: {
        prototype: HTMLMtvCrossIframeElement;
        new (): HTMLMtvCrossIframeElement;
    };
    interface HTMLMtvMainElement extends Components.MtvMain, HTMLStencilElement {
    }
    var HTMLMtvMainElement: {
        prototype: HTMLMtvMainElement;
        new (): HTMLMtvMainElement;
    };
    interface HTMLMtvModalPortalElement extends Components.MtvModalPortal, HTMLStencilElement {
    }
    var HTMLMtvModalPortalElement: {
        prototype: HTMLMtvModalPortalElement;
        new (): HTMLMtvModalPortalElement;
    };
    interface HTMLMtvPortalElement extends Components.MtvPortal, HTMLStencilElement {
    }
    var HTMLMtvPortalElement: {
        prototype: HTMLMtvPortalElement;
        new (): HTMLMtvPortalElement;
    };
    interface HTMLMtvTooltipPortalElement extends Components.MtvTooltipPortal, HTMLStencilElement {
    }
    var HTMLMtvTooltipPortalElement: {
        prototype: HTMLMtvTooltipPortalElement;
        new (): HTMLMtvTooltipPortalElement;
    };
    interface HTMLMtvWindowElement extends Components.MtvWindow, HTMLStencilElement {
    }
    var HTMLMtvWindowElement: {
        prototype: HTMLMtvWindowElement;
        new (): HTMLMtvWindowElement;
    };
    interface HTMLMtvWindowHeaderElement extends Components.MtvWindowHeader, HTMLStencilElement {
    }
    var HTMLMtvWindowHeaderElement: {
        prototype: HTMLMtvWindowHeaderElement;
        new (): HTMLMtvWindowHeaderElement;
    };
    interface HTMLElementTagNameMap {
        "mtv-cross-iframe": HTMLMtvCrossIframeElement;
        "mtv-main": HTMLMtvMainElement;
        "mtv-modal-portal": HTMLMtvModalPortalElement;
        "mtv-portal": HTMLMtvPortalElement;
        "mtv-tooltip-portal": HTMLMtvTooltipPortalElement;
        "mtv-window": HTMLMtvWindowElement;
        "mtv-window-header": HTMLMtvWindowHeaderElement;
    }
}
declare namespace LocalJSX {
    interface MtvCrossIframe {
        /**
          * Disable loader on iframe loading;
         */
        "appRoute"?: boolean;
        /**
          * Disable loader on iframe loading;
         */
        "disableLoader"?: boolean;
        /**
          * Fit size of the Element to the content of the iframe;
         */
        "fitToContent"?: boolean | string;
        /**
          * Head code to inject to the iframe, styles, links and scripts;
         */
        "headCode"?: string;
        /**
          * The app name id.
         */
        "name"?: string;
        /**
          * The route of the gust app.
         */
        "route"?: string;
        /**
          * The url of the gust app to be hosted.
         */
        "src"?: string;
    }
    interface MtvMain {
    }
    interface MtvModalPortal {
        /**
          * Hide overlay element
         */
        "hideOverlay"?: boolean;
        /**
          * Id for the portal element
         */
        "nameId"?: string;
        /**
          * elementLandedInTarget event fired when the element complete to land on targetContainer.
         */
        "onElementLandedInTarget"?: (event: CustomEvent<{
    portalElm: HTMLElement;
    portalContentElm: HTMLElement;
    target: HTMLElement;
    modalContentElm: HTMLDivElement;
  }>) => void;
        "onPortalLoaded"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * Overlay background color
         */
        "overlayColor"?: string;
        /**
          * Element To put the portal into. it's Can be element from current document or even element from another document like iframe parent body.
         */
        "targetContainer"?: HTMLElement;
    }
    interface MtvPortal {
        /**
          * HTML head inline code (scripts, links, styles ect...)  to inject to the targetContainer in addition to the portaled element itself;
         */
        "headInlineHtml"?: string;
        /**
          * Uniqe name for internal classes names and ect
         */
        "nameId"?: string;
        /**
          * elementLandedInTarget event fired when the element complete to land on targetContainer.
         */
        "onElementLandedInTarget"?: (event: CustomEvent<{
    portalElm: HTMLElement;
    portalContentElm: HTMLElement;
    target: HTMLElement;
  }>) => void;
        /**
          * portalLoaded event fired when the portal element complete to load.
         */
        "onPortalLoaded"?: (event: CustomEvent<HTMLElement>) => void;
        /**
          * The target container that will contain the portaled element.
         */
        "targetContainer"?: HTMLElement;
    }
    interface MtvTooltipPortal {
        /**
          * Background color of the tooltip;
         */
        "background"?: string;
        /**
          * Uniqe name for internal classes names and ect
         */
        "nameId"?: string;
        /**
          * tooltipBlur event fired when tooltip element out of focus, or in shortly - blurred;
         */
        "onTooltipBlur"?: (event: CustomEvent<any>) => void;
        /**
          * The Position of the portaled element.
         */
        "position"?: { x: number; y: number };
        /**
          * The target container that will contain the portaled element.
         */
        "targetContainer"?: HTMLElement;
    }
    interface MtvWindow {
        /**
          * Uniqe name for internal classes names and ect
         */
        "name"?: string;
    }
    interface MtvWindowHeader {
        /**
          * Emit event to change window display mode
         */
        "onChangeDisplayMode"?: (event: CustomEvent<DisplayModes>) => void;
        /**
          * The window name
         */
        "windowName"?: string;
    }
    interface IntrinsicElements {
        "mtv-cross-iframe": MtvCrossIframe;
        "mtv-main": MtvMain;
        "mtv-modal-portal": MtvModalPortal;
        "mtv-portal": MtvPortal;
        "mtv-tooltip-portal": MtvTooltipPortal;
        "mtv-window": MtvWindow;
        "mtv-window-header": MtvWindowHeader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mtv-cross-iframe": LocalJSX.MtvCrossIframe & JSXBase.HTMLAttributes<HTMLMtvCrossIframeElement>;
            "mtv-main": LocalJSX.MtvMain & JSXBase.HTMLAttributes<HTMLMtvMainElement>;
            "mtv-modal-portal": LocalJSX.MtvModalPortal & JSXBase.HTMLAttributes<HTMLMtvModalPortalElement>;
            "mtv-portal": LocalJSX.MtvPortal & JSXBase.HTMLAttributes<HTMLMtvPortalElement>;
            "mtv-tooltip-portal": LocalJSX.MtvTooltipPortal & JSXBase.HTMLAttributes<HTMLMtvTooltipPortalElement>;
            "mtv-window": LocalJSX.MtvWindow & JSXBase.HTMLAttributes<HTMLMtvWindowElement>;
            "mtv-window-header": LocalJSX.MtvWindowHeader & JSXBase.HTMLAttributes<HTMLMtvWindowHeaderElement>;
        }
    }
}
